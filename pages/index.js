import { Flex } from "@chakra-ui/react";
import Head from "next/head";
import { useEffect, useState } from "react";
import { Header, Lists, Map } from "../components";
import { getPlacesData } from "./api";

export default function Home() {
  const [places, setPlaces] = useState([]);
  const [coordinates, setCoordinates] = useState({});
  const [bounds, setBounds] = useState(null);
  const [type, setType] = useState("restaurants");
  const [ratings, setRatings] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [filteredPlaces, setFilteredPlaces] = useState([]);

  useEffect(() => {
    navigator.geolocation.getCurrentPosition(
      ({ coords: { latitude, longitude } }) => {
        // console.log({ latitude, longitude });
        setCoordinates({ lat: latitude, lng: longitude });
      }
    );
  }, []);

  useEffect(() => {
    const filterData = places?.filter((place) => place.rating > ratings);
    setFilteredPlaces(filterData);
    // console.log(ratings);
    // console.log(filterData);
  }, [places, ratings]);

  useEffect(() => {
    setIsLoading(true);
    getPlacesData(type, bounds?.sw, bounds?.ne).then((data) => {
      console.log(data);
      setPlaces(data);
      setIsLoading(false);
    });
  }, [type, coordinates, bounds]);

  return (
    <>
      <Head>
        <title>Travel Advisor</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <script async src="https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyA5VlbZGEEJsA4gFLhScCRNEgojrUKZjKM"></script>
      </Head>
      <Flex
        justifyContent={"center"}
        alignItems={"center"}
        width={"100vw"}
        maxWidth={"100vw"}
        height={"100vh"}
        maxHeight="100vh"
      >
        <Header
          ratings={ratings}
          setRatings={setRatings}
          type={type}
          setType={setType}
        />
        <Lists
          places={filteredPlaces?.length ? filteredPlaces : places}
          isLoading={isLoading}
        />
        <Map
          coordinates={coordinates}
          setCoordinates={setCoordinates}
          setBounds={setBounds}
          places={filteredPlaces?.length ? filteredPlaces : places}
        />
      </Flex>
    </>
  );
}
